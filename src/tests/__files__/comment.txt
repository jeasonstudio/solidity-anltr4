// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.8.2 < 0.9.0;

/// @title A simulator for trees
/// @author Larry A. Gardner
/// @notice You can use this contract for only the most basic simulation
/// @dev All function calls are currently implemented without side effects
/// @custom:experimental This is an experimental contract.
contract Tree {
    /// @notice Calculate tree age in years, rounded up, for live trees
    /// @dev The Alexandr N. Tetearing algorithm could increase precision
    /// @param rings The number of rings from dendrochronological sample
    /// @return Age in years, rounded up for partial years
    function age(uint256 rings) external virtual pure returns (uint256) {
        return rings + 1;
    }

    ///@notice Returns the amount of leaves the tree has.
    /// @dev Returns only a fixed number.
    function leaves() external virtual pure returns(uint256) {
        return 2;
    }
}

contract Plant {
    function leaves() external virtual pure returns(uint256) {
        return 3;
    }
}

/** aabb */
contract KumquatTree is Tree, Plant /*test*/{
    /**
     * @param _target Address of contract or account to call
     * @param _value Amount of ETH to send
     * @param _func Function signature, for example "foo(address,uint256)"
     * @param _data ABI encoded data send.
     * @param _timestamp Timestamp after which the transaction can be executed.
     */
    function age(uint256 rings /* test */) external override pure returns (uint256) {

      //asdffff
        return rings + 2;
    }

    ///Return the amount of leaves that this specific kind of tree has
    /// @inheritdoc Tree
    function leaves() external override(Tree, Plant) pure returns(uint256) {
        return 3;
    }
}

contract A is B /*comment for B*/,C/*comment for C*/{}

contract Comment {
  function test() pure {
    revert Transaction({
        to: _to,
        value: _value,
        data: _data,
        executed: false,
        numConfirmations: 0
    });
  }

  function aloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongName(
    string n1,
    string n2,
    string n3,
    string n4,
    string n5,
    string n6
  )
    public
    pure
    modifier1() modifier22222222222222("asdfasfdasdfasdfasdf")
    virtual
    override(Foo, Bar, MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM)
    returns (string, string, string, string, string, string, string, string, string, string, string)
  {
    emit Test();
  }

  function encode(
        uint x,
        address addr,
        uint[] calldata arr,
        MyStruct calldata myStruct
    ) external pure returns (bytes memory) {
        return abi.encode(x, addr, arr, myStruct);
    }

  function deploy(address _owner, uint _foo, bytes32 _salt)
        public
        payable
        returns (address)
    {
        // This syntax is a newer way to invoke create2 without assembly, you just need to pass salt
        // https://docs.soliditylang.org/en/latest/control-structures.html#salted-contract-creations-create2
        return address(new TestContract{ salt: _salt }(_owner, _foo));
    }
}

function test() pure {
    // hhh11
  }

abstract contract aloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongName is Foo("aloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongName", "aloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongName"), aloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongName2 {}

contract Foo {
  // hhh
}
